make int size = 10
make array board = *([[0] * size] * size)

define printBoard () {
    do say(j ? "#" : ".") for j in i then sayln() for i in board
}

define bool getFrom (int x, int y) {
    return x >= 0 && x < size && y >= 0 && y < size ? board#x#y : false
}

define bool getAlive (int x, int y) {
    make int neighbors = 
        getFrom(x - 1, y - 1) +
        getFrom(x - 1, y) +
        getFrom(x - 1, y + 1) +
        getFrom(x, y - 1) +
        getFrom(x, y + 1) +
        getFrom(x + 1, y - 1) +
        getFrom(x + 1, y) +
        getFrom(x + 1, y + 1)
    return getFrom(x, y) ? (neighbors == 2 || neighbors == 3) : (neighbors == 3)
}

define nextGen () {
    make newBoard = *board
    set newBoard#i#j = getAlive(i, j) for j in 0:>board#i for i in 0:>board
    set board = newBoard
}

// Glider
set board#1#3 = 1
set board#2#1 = 1
set board#2#3 = 1
set board#3#2 = 1
set board#3#3 = 1


make int max_iteration = 25
do {
    do clear()
    do sayln("Generation " + i)
    do printBoard()
    do nextGen()
    do sleep(0.5)
} for i in 0:>max_iteration