/// std_io
do say("say") // expect "say" (no newline)
do sayln("sayln") // expect "sayln" (newline)

// listen input is not used to avoid blocking the test
// do listen ()

// do sayln(read("hello_world.to")) // expect <file content of hello_world.to>

// write and append are not used to avoid modifying the test
// do write ("std_lib.to", "write")
// do append ("std_lib.to", "append")

// clear is not used to avoid modifying the test
// do clear ()

// pause is not used to avoid blocking the test
// do pause ()

do system("echo system") // expect "system"

// end is not used to avoid stopping the test
// do end ()


/// std_math
do sayln(abs(-1)) // expect 1
do sayln(ceil(1.5)) // expect 2
do sayln(floor(1.5)) // expect 1
do sayln(round(1.5)) // expect 2
do sayln(max(1, 2)) // expect 2
do sayln(min(1, 2)) // expect 1
do sayln(pow(2, 3)) // expect 8
do sayln(sqrt(4)) // expect 2
do sayln(log(10, 100)) // expect 2
do sayln(log10(100)) // expect 2
do sayln(log2(8)) // expect 3
do sayln(exp(1)) // expect 2.718282
do sayln(sin(1)) // expect 0.841471
do sayln(cos(1)) // expect 0.540302
do sayln(tan(1)) // expect 1.557408
do sayln(asin(1)) // expect 1.570796
do sayln(acos(1)) // expect 0
do sayln(atan(1)) // expect 0.785398
do sayln(atan2(1, 1)) // expect 0.785398
do sayln(clamp(0, 1, 2)) // expect 1

// /// std_str
do sayln(split("hello my name is dosato and i am a test string", " ")) // expect ["hello", "my", "name", "is", "dosato", "and", "i", "am", "a", "test", "string"]
do sayln(lower("Hello")) // expect "hello"
do sayln(upper("Hello")) // expect "HELLO"
do sayln(stringlength("hello")) // expect 5
do sayln(substring("hello", 1, 2)) // expect "el"
do sayln(stringindexof("hello", "e")) // expect 1
do sayln(stringlastindexof("hello", "l")) // expect 3
do sayln(replace("hello", "l", "r")) // expect "herro"
do sayln(trim("  hello  ")) // expect "hello"
do sayln(startswith("hello", "h")) // expect true
do sayln(endswith("hello", "o")) // expect true
do sayln(stringcontains("hello", "e")) // expect true
do sayln(stringreverse("hello")) // expect "olleh"
do sayln(stringremove("hello", "ell")) // expect "ho"
do sayln(stringinsert("hello", 1, "e")) // expect "heello"
do sayln(stringtoint("1")) // expect 1
do sayln(stringtodouble("1.5")) // expect 1.5
do sayln(stringcount("hello", "l")) // expect 2
do sayln(join(["hello", "world"], " ")) // expect "hello world"

/// std_array
make array a = [1, 2, 3]

do sayln(sort(a)) // expect [1, 2, 3]
define long compare (long a, long b) {
    return b - a
}
do sayln(sort(a, compare)) // expect [3, 2, 1]
set a = [1, 2, 3]
do sayln(push(a, 4)) // expect [1, 2, 3, 4]
do sayln(pop(a)) // expect 4
do sayln(unshift(a, 0)) // expect [0, 1, 2, 3]
do sayln(shift(a)) // expect [2, 3]
do sayln(splice(a, 1, 1)) // expect [1, 3]
do sayln(slice(a, 1, 2)) // expect [2]
do sayln(indexof(a, 2)) // expect 1
do sayln(range(10)) // expect [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
do sayln(range(1, 10)) // expect [1, 2, 3, 4, 5, 6, 7, 8, 9]
do sayln(range(1, 10, 2)) // expect [1, 3, 5, 7, 9]
do sayln(range(10, 1, -1)) // expect [10, 9, 8, 7, 6, 5, 4, 3, 2]
do sayln(rangef(0, 10, 0.5)) // expect [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5]

/// std_random
do srandom(1) // seed random number generator
do sayln(random()) // expect 0.001251
do sayln(randomint()) // expect 18467
do sayln(randomrange(1, 10)) // expect 5
do sayln(randombool()) // expect false

/// std_time
do sayln(time()) // expect current time in seconds
do sayln(datetime()) // expect current date formatted

// we don't sleep to avoid blocking the test
// do sleep(1)


/// std_type
do sayln(typeof(1)) // expect "ulong"
do sayln(typeof(1.5)) // expect "double"
do sayln(typeof("hello")) // expect "string"
do sayln(typeof([1, 2, 3])) // expect "array"
do sayln(typeof({})) // expect "object"
do sayln(typeof(true)) // expect "bool"
do sayln(typeof(null)) // expect "<unknown type>"

do sayln(typeintof(1)) // expect 13
do sayln(typeintof(1.5)) // expect 4
do sayln(typeintof("hello")) // expect 2
do sayln(typeintof([1, 2, 3])) // expect 10

do sayln(isnull(null)) // expect true
do sayln(isnull(false)) // expect false