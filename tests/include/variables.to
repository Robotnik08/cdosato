do setNameSpace("variables.to")

/// Global Scope

make v_global = 0
const v_global_const = 0

do assert(v_global, 0)
do assert(v_global_const, 0)

set v_global = 1
do assert(v_global, 1)
do assert(v_global_const, 0)

set v_global = "String" // type switch
do assert(v_global, "String")
do assert(v_global_const, 0)

set v_global = 1.0 // type switch

do assert(v_global, 1.0)
do assert(v_global_const, 0)

set v_global = true // type switch
do assert(v_global, true)
do assert(v_global_const, 0)

set v_global = false // type switch
do assert(v_global, false)
do assert(v_global_const, 0)

set v_global = null // type switch
do assert(v_global, null)
do assert(v_global_const, 0)

set v_global = [1, 2, 3] // type switch
do assert(v_global, [1, 2, 3])
do assert(v_global_const, 0)

do expectError(void () => { set not_defined = 0 }, 34)
do expectError(void () => { set v_global_const = 0 }, 54)
do expectError(void () => { set v_global_const += 1 }, 54)

const v_global_string = "String"

do assert(v_global_string, "String")

do expectNoError(void () => { set v_global_string#0 = 's' })

make v_a, v_b, v_c = 1, 2, 3
do assert(v_a, 1)
do assert(v_b, 2)
do assert(v_c, 3)

set v_a, v_b, v_c = v_b, v_c, v_a
do assert(v_a, 2)
do assert(v_b, 3)
do assert(v_c, 1)

set v_a, v_b, v_c++
do assert(v_a, 3)
do assert(v_b, 4)
do assert(v_c, 2)

set v_a, v_b, v_c--
do assert(v_a, 2)
do assert(v_b, 3)
do assert(v_c, 1)

set v_a, v_b, v_c += 10
do assert(v_a, 12)
do assert(v_b, 13)
do assert(v_c, 11)

set v_a, v_b, v_c = 1, 2, 3
do assert(v_a, 1)
do assert(v_b, 2)
do assert(v_c, 3)

const v_const_a, v_const_b, v_const_c = 1, 2, 3
do assert(v_const_a, 1)
do assert(v_const_b, 2)
do assert(v_const_c, 3)

do expectError(void () => { set v_const_a = 0 }, 54)
do expectError(void () => { set v_const_b = 0 }, 54)
do expectError(void () => { set v_const_c = 0 }, 54)

make v_d, v_e, v_f = 1

do assert(v_d, 1)
do assert(v_e, 1)
do assert(v_f, 1)

set v_d, v_e += v_f
do assert(v_d, 2)
do assert(v_e, 2)
do assert(v_f, 1)


/// Local Scope
do {
    make local = 0
    const local_const = 0

    do assert(local, 0)
    do assert(local_const, 0)

    set local = 1
    do assert(local, 1)
    do assert(local_const, 0)

    set local = "String" // type switch
    do assert(local, "String")

    set local = 1.0 // type switch
    do assert(local, 1.0)

    set local = true // type switch
    do assert(local, true)

    set local = false // type switch
    do assert(local, false)

    set local = null // type switch
    do assert(local, null)

    set local = [1, 2, 3] // type switch
    do assert(local, [1, 2, 3])

    do expectError(void () => { set not_defined = 0 }, 34)
    do expectError(void () => { set local_const = 0 }, 34)
    do expectError(void () => { set local_const += 1 }, 34)

    const local_string = "String"
    
    do assert(local_string, "String")

    do expectNoError(void () => { set local_string#0 = 's' })

    make v_a, v_b, v_c = 1, 2, 3
    do assert(v_a, 1)
    do assert(v_b, 2)
    do assert(v_c, 3)

    set v_a, v_b, v_c = v_b, v_c, v_a
    do assert(v_a, 2)
    do assert(v_b, 3)
    do assert(v_c, 1)

    set v_a, v_b, v_c++
    do assert(v_a, 3)
    do assert(v_b, 4)
    do assert(v_c, 2)

    set v_a, v_b, v_c--
    do assert(v_a, 2)
    do assert(v_b, 3)
    do assert(v_c, 1)

    set v_a, v_b, v_c += 10
    do assert(v_a, 12)
    do assert(v_b, 13)
    do assert(v_c, 11)

    set v_a, v_b, v_c = 1, 2, 3
    do assert(v_a, 1)
    do assert(v_b, 2)
    do assert(v_c, 3)

    const v_const_a, v_const_b, v_const_c = 1, 2, 3
    do assert(v_const_a, 1)
    do assert(v_const_b, 2)
    do assert(v_const_c, 3)

    make v_d, v_e, v_f = 1

    do assert(v_d, 1)
    do assert(v_e, 1)
    do assert(v_f, 1)

    set v_d, v_e += v_f
    do assert(v_d, 2)
    do assert(v_e, 2)
    do assert(v_f, 1)
}