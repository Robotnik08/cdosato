do setNameSpace("types.to")

make int int_value = 1
make bool bool_value = true
make string string_value = "String"
make float float_value = 1.5F
make double double_value = 1.5
make char char_value = 'c'
make short short_value = 1
make byte byte_value = 1
make void void_value = null
make array array_value = [1, 2, 3]
make uint uint_value = 1
make ushort ushort_value = 1
make ulong ulong_value = 1
make ubyte ubyte_value = 1
make object object_value = {}
make var var_value = 1
make var_value2 = 1
make function function_value = void () => {}

/// Int to ALL
do assert((int)int_value, 1)
do assert((bool)int_value, true)
do assert((string)int_value, "1")
do assert((float)int_value, 1.0F)
do assert((double)int_value, 1.0)
do assert((char)int_value, (char)1)
do assert((short)int_value, 1)
do assert((byte)int_value, 1)
do expectError(void () => { do ((array)int_value) () }, 45)
do assert((uint)int_value, 1)
do assert((ushort)int_value, 1)
do assert((ulong)int_value, 1)
do assert((ubyte)int_value, 1)
do expectError(void () => { do ((object)int_value) () }, 44)
do assert((var)int_value, 1)
do expectError(void () => { do ((function)int_value) () }, 44)

/// Bool to ALL
do assert((int)bool_value, 1)
do assert((bool)bool_value, true)
do assert((string)bool_value, "true")
do assert((float)bool_value, 1.0F)
do assert((double)bool_value, 1.0)
do assert((char)bool_value, (char)1)
do assert((short)bool_value, 1)
do assert((byte)bool_value, 1)
do expectError(void () => { do ((array)bool_value) () }, 45)
do assert((uint)bool_value, 1)
do assert((ushort)bool_value, 1)
do assert((ulong)bool_value, 1)
do assert((ubyte)bool_value, 1)
do expectError(void () => { do ((object)bool_value) () }, 44)
do assert((var)bool_value, true)
do expectError(void () => { do ((function)bool_value) () }, 44)

/// String to ALL
do assert((int)string_value, 6)
do assert((bool)string_value, true)
do assert((string)string_value, "String")
do assert((float)string_value, 6.0F)
do assert((double)string_value, 6.0)
do assert((char)string_value, (char)6)
do assert((short)string_value, 6)
do assert((byte)string_value, 6)
do expectError(void () => { do ((array)string_value) () }, 45)
do assert((uint)string_value, 6)
do assert((ushort)string_value, 6)
do assert((ulong)string_value, 6)
do assert((ubyte)string_value, 6)
do expectError(void () => { do ((object)string_value) () }, 44)
do assert((var)string_value, "String")
do expectError(void () => { do ((function)string_value) () }, 44)

/// Float to ALL
do assert((int)float_value, 1)
do assert((bool)float_value, true)
do assert((string)float_value, "1.5")
do assert((float)float_value, 1.5F)
do assert((double)float_value, 1.5)
do assert((char)float_value, (char)1)
do assert((short)float_value, 1)
do assert((byte)float_value, 1)
do expectError(void () => { do ((array)float_value) () }, 45)
do assert((uint)float_value, 1)
do assert((ushort)float_value, 1)
do assert((ulong)float_value, 1)
do assert((ubyte)float_value, 1)
do expectError(void () => { do ((object)float_value) () }, 44)
do assert((var)float_value, 1.5F)
do expectError(void () => { do ((function)float_value) () }, 44)

/// Double to ALL
do assert((int)double_value, 1)
do assert((bool)double_value, true)
do assert((string)double_value, "1.5")
do assert((float)double_value, 1.5F)
do assert((double)double_value, 1.5)
do assert((char)double_value, (char)1)
do assert((short)double_value, 1)
do assert((byte)double_value, 1)
do expectError(void () => { do ((array)double_value) () }, 45)
do assert((uint)double_value, 1)
do assert((ushort)double_value, 1)
do assert((ulong)double_value, 1)
do assert((ubyte)double_value, 1)
do expectError(void () => { do ((object)double_value) () }, 44)
do assert((var)double_value, 1.5)
do expectError(void () => { do ((function)double_value) () }, 44)

/// Char to ALL
do assert((int)char_value, 99)
do assert((bool)char_value, true)
do assert((string)char_value, "c")
do assert((float)char_value, 99.0F)
do assert((double)char_value, 99.0)
do assert((char)char_value, (char)99)
do assert((short)char_value, 99)
do assert((byte)char_value, 99)
do expectError(void () => { do ((array)char_value) () }, 45)
do assert((uint)char_value, 99)
do assert((ushort)char_value, 99)
do assert((ulong)char_value, 99)
do assert((ubyte)char_value, 99)
do expectError(void () => { do ((object)char_value) () }, 44)
do assert((var)char_value, 'c')
do expectError(void () => { do ((function)char_value) () }, 44)

/// Short to ALL
do assert((int)short_value, 1)
do assert((bool)short_value, true)
do assert((string)short_value, "1")
do assert((float)short_value, 1.0F)
do assert((double)short_value, 1.0)
do assert((char)short_value, (char)1)
do assert((short)short_value, 1)
do assert((byte)short_value, 1)
do expectError(void () => { do ((array)short_value) () }, 45)
do assert((uint)short_value, 1)
do assert((ushort)short_value, 1)
do assert((ulong)short_value, 1)
do assert((ubyte)short_value, 1)
do expectError(void () => { do ((object)short_value) () }, 44)
do assert((var)short_value, 1)
do expectError(void () => { do ((function)short_value) () }, 44)

/// Byte to ALL
do assert((int)byte_value, 1)
do assert((bool)byte_value, true)
do assert((string)byte_value, "1")
do assert((float)byte_value, 1.0F)
do assert((double)byte_value, 1.0)
do assert((char)byte_value, (char)1)
do assert((short)byte_value, 1)
do assert((byte)byte_value, 1)
do expectError(void () => { do ((array)byte_value) () }, 45)
do assert((uint)byte_value, 1)
do assert((ushort)byte_value, 1)
do assert((ulong)byte_value, 1)
do assert((ubyte)byte_value, 1)
do expectError(void () => { do ((object)byte_value) () }, 44)
do assert((var)byte_value, 1)
do expectError(void () => { do ((function)byte_value) () }, 44)

/// Void to ALL
do expectError(void () => { do ((int)void_value) () }, 50)
do expectError(void () => { do ((bool)void_value) () }, 50)
do expectError(void () => { do ((string)void_value) () }, 50)
do expectError(void () => { do ((float)void_value) () }, 50)
do expectError(void () => { do ((double)void_value) () }, 50)
do expectError(void () => { do ((char)void_value) () }, 50)
do expectError(void () => { do ((short)void_value) () }, 50)
do expectError(void () => { do ((byte)void_value) () }, 50)
do expectError(void () => { do ((array)void_value) () }, 45)
do expectError(void () => { do ((uint)void_value) () }, 50)
do expectError(void () => { do ((ushort)void_value) () }, 50)
do expectError(void () => { do ((ulong)void_value) () }, 50)
do expectError(void () => { do ((ubyte)void_value) () }, 50)
do expectError(void () => { do ((object)void_value) () }, 44)
do expectError(void () => { do ((var)void_value) () }, 50)
do expectError(void () => { do ((function)void_value) () }, 44)

/// Array to ALL
do assert((int)array_value, 3)
do assert((bool)array_value, true)
do assert((string)array_value, "[1, 2, 3]")
do assert((float)array_value, 3.0F)
do assert((double)array_value, 3.0)
do assert((char)array_value, (char)3)
do assert((short)array_value, 3)
do assert((byte)array_value, 3)
do assert((array)array_value, [1, 2, 3])
do assert((uint)array_value, 3)
do assert((ushort)array_value, 3)
do assert((ulong)array_value, 3)
do assert((ubyte)array_value, 3)
do expectError(void () => { do ((object)array_value) () }, 44)
do assert((var)array_value, [1, 2, 3])
do expectError(void () => { do ((function)array_value) () }, 44)

/// Uint to ALL
do assert((int)uint_value, 1)
do assert((bool)uint_value, true)
do assert((string)uint_value, "1")
do assert((float)uint_value, 1.0F)
do assert((double)uint_value, 1.0)
do assert((char)uint_value, (char)1)
do assert((short)uint_value, 1)
do assert((byte)uint_value, 1)
do expectError(void () => { do ((array)uint_value) () }, 45)
do assert((uint)uint_value, 1)
do assert((ushort)uint_value, 1)
do assert((ulong)uint_value, 1)
do assert((ubyte)uint_value, 1)
do expectError(void () => { do ((object)uint_value) () }, 44)
do assert((var)uint_value, 1)
do expectError(void () => { do ((function)uint_value) () }, 44)

/// Ushort to ALL
do assert((int)ushort_value, 1)
do assert((bool)ushort_value, true)
do assert((string)ushort_value, "1")
do assert((float)ushort_value, 1.0F)
do assert((double)ushort_value, 1.0)
do assert((char)ushort_value, (char)1)
do assert((short)ushort_value, 1)
do assert((byte)ushort_value, 1)
do expectError(void () => { do ((array)ushort_value) () }, 45)
do assert((uint)ushort_value, 1)
do assert((ushort)ushort_value, 1)
do assert((ulong)ushort_value, 1)
do assert((ubyte)ushort_value, 1)
do expectError(void () => { do ((object)ushort_value) () }, 44)
do assert((var)ushort_value, 1)
do expectError(void () => { do ((function)ushort_value) () }, 44)

/// Ulong to ALL
do assert((int)ulong_value, 1)
do assert((bool)ulong_value, true)
do assert((string)ulong_value, "1")
do assert((float)ulong_value, 1.0F)
do assert((double)ulong_value, 1.0)
do assert((char)ulong_value, (char)1)
do assert((short)ulong_value, 1)
do assert((byte)ulong_value, 1)
do expectError(void () => { do ((array)ulong_value) () }, 45)
do assert((uint)ulong_value, 1)
do assert((ushort)ulong_value, 1)
do assert((ulong)ulong_value, 1)
do assert((ubyte)ulong_value, 1)
do expectError(void () => { do ((object)ulong_value) () }, 44)
do assert((var)ulong_value, 1)
do expectError(void () => { do ((function)ulong_value) () }, 44)

/// Ubyte to ALL
do assert((int)ubyte_value, 1)
do assert((bool)ubyte_value, true)
do assert((string)ubyte_value, "1")
do assert((float)ubyte_value, 1.0F)
do assert((double)ubyte_value, 1.0)
do assert((char)ubyte_value, (char)1)
do assert((short)ubyte_value, 1)
do assert((byte)ubyte_value, 1)
do expectError(void () => { do ((array)ubyte_value) () }, 45)
do assert((uint)ubyte_value, 1)
do assert((ushort)ubyte_value, 1)
do assert((ulong)ubyte_value, 1)
do assert((ubyte)ubyte_value, 1)
do expectError(void () => { do ((object)ubyte_value) () }, 44)
do assert((var)ubyte_value, 1)
do expectError(void () => { do ((function)ubyte_value) () }, 44)

/// Object to ALL
do expectError(void () => { do ((int)object_value) () }, 42)
do expectError(void () => { do ((bool)object_value) () }, 43)
do assert((string)object_value, "{}")
do expectError(void () => { do ((float)object_value) () }, 43)
do expectError(void () => { do ((double)object_value) () }, 43)
do expectError(void () => { do ((char)object_value) () }, 42)
do expectError(void () => { do ((short)object_value) () }, 42)
do expectError(void () => { do ((byte)object_value) () }, 42)
do expectError(void () => { do ((array)object_value) () }, 45)
do expectError(void () => { do ((uint)object_value) () }, 42)
do expectError(void () => { do ((ushort)object_value) () }, 42)
do expectError(void () => { do ((ulong)object_value) () }, 42)
do expectError(void () => { do ((ubyte)object_value) () }, 42)
do assert((object)object_value, {})
do assert((var)object_value, {})
do expectError(void () => { do ((function)object_value) () }, 44)

/// Var to ALL
do assert((int)var_value, 1)
do assert((bool)var_value, true)
do assert((string)var_value, "1")
do assert((float)var_value, 1.0F)
do assert((double)var_value, 1.0)
do assert((char)var_value, (char)1)
do assert((short)var_value, 1)
do assert((byte)var_value, 1)
do expectError(void () => { do ((array)var_value) () }, 45)
do assert((uint)var_value, 1)
do assert((ushort)var_value, 1)
do assert((ulong)var_value, 1)
do assert((ubyte)var_value, 1)
do expectError(void () => { do ((object)var_value) () }, 44)
do assert((var)var_value, 1)
do expectError(void () => { do ((function)var_value) () }, 44)